/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smf.gui.contab;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import smf.controller.CuentacontableJpaController;
import smf.gui.BaseFrame;
import smf.util.tree.CCNodeItem;
import smf.util.tree.CntContabNode;

/**
 *
 * @author mjapon
 */
public class PlanCuentasFrame extends BaseFrame {
        
    private DefaultMutableTreeNode root;
    private CuentacontableJpaController ccController;
    private JTree jTreePC ;
    private JScrollPane mainScrollPane;

    /**
     * Creates new form PlanCuentasFrame
     */
    public PlanCuentasFrame() {
        super();
        initComponents();        
        ccController = new CuentacontableJpaController(em);
        initTree();
    }    
    
    public void addChilds(DefaultMutableTreeNode root, List<CCNodeItem> childs, Map<Integer, Set<CCNodeItem>> mapNodos){
        childs.stream().forEach(e->{
            CntContabNode node = new CntContabNode(e);
            root.add( node );
            if ( mapNodos.containsKey(e.getIdDb()) ){
                List<CCNodeItem> childsIter = mapNodos.get(e.getIdDb()).stream().collect(Collectors.toList());
                Collections.sort(childsIter);
                addChilds(node, childsIter, mapNodos);
            }
        });
    }    
    
    public void initTree(){
        root = new DefaultMutableTreeNode("Cuentas");
        List<CCNodeItem> thelist = ccController.listar();
        Map<Integer, Set<CCNodeItem>> mapNodos = new HashMap<>();
        
        List<CCNodeItem> roots= new ArrayList<>();
        
        thelist.stream().forEach(e -> {
            Integer idDb = e.getIdDb();
            Integer parent = e.getParent();
            if (parent != null){
                if (!mapNodos.containsKey(parent)){
                    mapNodos.put(parent, new HashSet<>());
                }
                mapNodos.get(parent).add(e);
            }
            else{
                roots.add(e);
            }
        });
        
        addChilds(root, roots, mapNodos);
        
        jTreePC = new JTree(root);
        jTreePC.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTreePC.addTreeSelectionListener(e -> {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTreePC.getLastSelectedPathComponent();
            jButtonAdd.setEnabled(false);
            if (jTreePC.getLastSelectedPathComponent()!=null){
                if (!jTreePC.getLastSelectedPathComponent().equals(root)){
                    jButtonAdd.setEnabled(true);
                }
            }
        });
        
        if (mainScrollPane != null){
            jPanelCenter.remove(mainScrollPane);
        }
        
        mainScrollPane = new JScrollPane(jTreePC);
        jPanelCenter.add(mainScrollPane, BorderLayout.CENTER);
        pack();
        jButtonAdd.setEnabled(false);
    }   
    
    private TreePath getTreePath(DefaultMutableTreeNode root, String cod) {
        Enumeration<DefaultMutableTreeNode> e = root.depthFirstEnumeration();
        while (e.hasMoreElements()) {            
            CntContabNode node = (CntContabNode)e.nextElement();
            if (node.getCuentacontable().getCodigo().equalsIgnoreCase(cod)) {
                return new TreePath(node.getPath());
            }
        }
        return null;
    }
    
    public void expandPath(String cod){
        TreePath treePath = getTreePath(root, cod);
        if (treePath != null){
            jTreePC.setSelectionPath(treePath);
            jTreePC.scrollPathToVisible(treePath);
        }
        else{
            System.out.println(" expandPath--> threepath is null ");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelNorth = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelCenter = new javax.swing.JPanel();
        jPanelBtns = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jBtnCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelNorth.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelNorth.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jPanelNorth.setPreferredSize(new java.awt.Dimension(679, 50));
        jPanelNorth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("Plan de cuentas");
        jPanelNorth.add(jLabel1);

        getContentPane().add(jPanelNorth, java.awt.BorderLayout.NORTH);

        jPanelCenter.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelBtns.setLayout(new java.awt.GridLayout(4, 1));

        jButtonAdd.setText("Agregar");
        jButtonAdd.setEnabled(false);
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanelBtns.add(jButtonAdd);

        jButtonEdit.setText("Editar");
        jButtonEdit.setEnabled(false);
        jPanelBtns.add(jButtonEdit);

        jBtnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smf/gui/icons/icons8-close_pane_filled.png"))); // NOI18N
        jBtnCerrar.setText("Cerrar");
        jBtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCerrarActionPerformed(evt);
            }
        });
        jPanelBtns.add(jBtnCerrar);

        getContentPane().add(jPanelBtns, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        try{
            CntContabNode node = (CntContabNode) jTreePC.getLastSelectedPathComponent();
            if (node != null){
                NewCuentaContableFrame newFrame = new NewCuentaContableFrame(this, node);
                newFrame.centerOnScreen();
                newFrame.setVisible(true);
            }
            else{
                showMsg("Elija una cuenta contable");
            }
        }
        catch(Throwable ex){
            showMsgError(ex);
        }        
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jBtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCerrarActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jBtnCerrarActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCerrar;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelBtns;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelNorth;
    // End of variables declaration//GEN-END:variables
}
